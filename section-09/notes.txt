Subqueries can be used as
  -> A source of a value ->  SELECT p1.name, (SELECT  COUNT(name) FROM products)
  -> A source of rows ->     FROM (SELECT * FROM products) AS p1
                             JOIN (SELECT * FROM products) AS p2 ON p1.id = p2.id
  -> A source of a column -> WHERE p1.id IN (SELECT id FROM products);

Understanding the shape of query result is key of underderstanding subqueries!
SELECT * FROM orders -> Returns many rows and many columns,
SELECT id from orders -> Returns many rows and one column
SELECT COUNT(*) FROM orders -> Returns one row and one column (single value) <- Scalar query

In the SELECT statement we can only write subqueries which return single value
In the FROM statement we can write any subquery, so long as the outer SELECTs / WHEREs / etc are compatible
In the JOIN statement we can write any subquery that returns data compatible with the 'ON' clause
In the WHERE statement, structure of data allowed to be returned by subquery changes depending on the comparison operator

Operator in the WHERE clause and
Structure of data the subquery must return

  > <-> Single value
  < <-> Single value
  >= <-> Single value
  <= <-> Single value
  = <-> Single value
  <> or != <-> Single value
  IN <-> Single column
  NOT IN <-> Single column

  > ALL <-> Single column
  < ALL <-> Single column
  >= ALL <-> Single column
  <= ALL <-> Single column
  = ALL <-> Single column
  <> ALL <-> Single column
  
  > SOME <-> Single column
  < SOME <-> Single column
  >= SOME <-> Single column
  <= SOME <-> Single column
  = SOME <-> Single column
  <> SOME <-> Single column

DISTINCT

What unique departments are there?
  -> SELECT DISTINCT department FROM products;

How many unique departments are there?
  -> SELECT COUNT(DISTINCT department) FROM prodcuts;

GREATEST
  -> Picks greates value inside paranthesis

LEAST
  -> Picks smallest value inside paranthesis